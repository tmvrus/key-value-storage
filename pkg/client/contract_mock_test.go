// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=./contract_mock_test.go -package=client
//

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockreaderWriter is a mock of readerWriter interface.
type MockreaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockreaderWriterMockRecorder
}

// MockreaderWriterMockRecorder is the mock recorder for MockreaderWriter.
type MockreaderWriterMockRecorder struct {
	mock *MockreaderWriter
}

// NewMockreaderWriter creates a new mock instance.
func NewMockreaderWriter(ctrl *gomock.Controller) *MockreaderWriter {
	mock := &MockreaderWriter{ctrl: ctrl}
	mock.recorder = &MockreaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreaderWriter) EXPECT() *MockreaderWriterMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockreaderWriter) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockreaderWriterMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockreaderWriter)(nil).Read), p)
}

// Write mocks base method.
func (m *MockreaderWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockreaderWriterMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockreaderWriter)(nil).Write), p)
}
